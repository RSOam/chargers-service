// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/chargers.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChargersServiceClient is the client API for ChargersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChargersServiceClient interface {
	CreateCharger(ctx context.Context, in *CreateChargerRequest, opts ...grpc.CallOption) (*CreateChargerResponse, error)
	UpdateCharger(ctx context.Context, in *UpdateChargerRequest, opts ...grpc.CallOption) (*UpdateChargerResponse, error)
	DeleteCharger(ctx context.Context, in *DeleteChargerRequest, opts ...grpc.CallOption) (*DeleteChargerResponse, error)
	GetCharger(ctx context.Context, in *GetChargerRequest, opts ...grpc.CallOption) (*GetChargerResponse, error)
	GetChargers(ctx context.Context, in *GetChargersRequest, opts ...grpc.CallOption) (*GetChargersResponse, error)
}

type chargersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChargersServiceClient(cc grpc.ClientConnInterface) ChargersServiceClient {
	return &chargersServiceClient{cc}
}

func (c *chargersServiceClient) CreateCharger(ctx context.Context, in *CreateChargerRequest, opts ...grpc.CallOption) (*CreateChargerResponse, error) {
	out := new(CreateChargerResponse)
	err := c.cc.Invoke(ctx, "/ChargersService/CreateCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargersServiceClient) UpdateCharger(ctx context.Context, in *UpdateChargerRequest, opts ...grpc.CallOption) (*UpdateChargerResponse, error) {
	out := new(UpdateChargerResponse)
	err := c.cc.Invoke(ctx, "/ChargersService/UpdateCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargersServiceClient) DeleteCharger(ctx context.Context, in *DeleteChargerRequest, opts ...grpc.CallOption) (*DeleteChargerResponse, error) {
	out := new(DeleteChargerResponse)
	err := c.cc.Invoke(ctx, "/ChargersService/DeleteCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargersServiceClient) GetCharger(ctx context.Context, in *GetChargerRequest, opts ...grpc.CallOption) (*GetChargerResponse, error) {
	out := new(GetChargerResponse)
	err := c.cc.Invoke(ctx, "/ChargersService/GetCharger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargersServiceClient) GetChargers(ctx context.Context, in *GetChargersRequest, opts ...grpc.CallOption) (*GetChargersResponse, error) {
	out := new(GetChargersResponse)
	err := c.cc.Invoke(ctx, "/ChargersService/GetChargers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChargersServiceServer is the server API for ChargersService service.
// All implementations should embed UnimplementedChargersServiceServer
// for forward compatibility
type ChargersServiceServer interface {
	CreateCharger(context.Context, *CreateChargerRequest) (*CreateChargerResponse, error)
	UpdateCharger(context.Context, *UpdateChargerRequest) (*UpdateChargerResponse, error)
	DeleteCharger(context.Context, *DeleteChargerRequest) (*DeleteChargerResponse, error)
	GetCharger(context.Context, *GetChargerRequest) (*GetChargerResponse, error)
	GetChargers(context.Context, *GetChargersRequest) (*GetChargersResponse, error)
}

// UnimplementedChargersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChargersServiceServer struct {
}

func (UnimplementedChargersServiceServer) CreateCharger(context.Context, *CreateChargerRequest) (*CreateChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharger not implemented")
}
func (UnimplementedChargersServiceServer) UpdateCharger(context.Context, *UpdateChargerRequest) (*UpdateChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharger not implemented")
}
func (UnimplementedChargersServiceServer) DeleteCharger(context.Context, *DeleteChargerRequest) (*DeleteChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharger not implemented")
}
func (UnimplementedChargersServiceServer) GetCharger(context.Context, *GetChargerRequest) (*GetChargerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharger not implemented")
}
func (UnimplementedChargersServiceServer) GetChargers(context.Context, *GetChargersRequest) (*GetChargersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargers not implemented")
}

// UnsafeChargersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargersServiceServer will
// result in compilation errors.
type UnsafeChargersServiceServer interface {
	mustEmbedUnimplementedChargersServiceServer()
}

func RegisterChargersServiceServer(s grpc.ServiceRegistrar, srv ChargersServiceServer) {
	s.RegisterService(&ChargersService_ServiceDesc, srv)
}

func _ChargersService_CreateCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargersServiceServer).CreateCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChargersService/CreateCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargersServiceServer).CreateCharger(ctx, req.(*CreateChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargersService_UpdateCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargersServiceServer).UpdateCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChargersService/UpdateCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargersServiceServer).UpdateCharger(ctx, req.(*UpdateChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargersService_DeleteCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargersServiceServer).DeleteCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChargersService/DeleteCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargersServiceServer).DeleteCharger(ctx, req.(*DeleteChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargersService_GetCharger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargersServiceServer).GetCharger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChargersService/GetCharger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargersServiceServer).GetCharger(ctx, req.(*GetChargerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargersService_GetChargers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargersServiceServer).GetChargers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChargersService/GetChargers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargersServiceServer).GetChargers(ctx, req.(*GetChargersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChargersService_ServiceDesc is the grpc.ServiceDesc for ChargersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChargersService",
	HandlerType: (*ChargersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharger",
			Handler:    _ChargersService_CreateCharger_Handler,
		},
		{
			MethodName: "UpdateCharger",
			Handler:    _ChargersService_UpdateCharger_Handler,
		},
		{
			MethodName: "DeleteCharger",
			Handler:    _ChargersService_DeleteCharger_Handler,
		},
		{
			MethodName: "GetCharger",
			Handler:    _ChargersService_GetCharger_Handler,
		},
		{
			MethodName: "GetChargers",
			Handler:    _ChargersService_GetChargers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chargers.proto",
}
